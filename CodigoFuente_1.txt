import streamlit as st
import polars as pl
import matplotlib.pyplot as plt

# Configuración de la página
st.set_page_config(layout="wide", page_title="Dashboard de Competencias Académicas", page_icon="📊")

# Cargar datos con caching
@st.cache_data(ttl=600)
def cargar_datos():
    try:
        df = pl.read_csv("Datos.csv", separator=";")
        df = df.sort(["Semana", "Plantel", "DOCENTE"])
        return df
    except Exception as e:
        st.error(f"Error al cargar los datos: {e}")
        return None

df = cargar_datos()

if df is None or not all(col in df.columns for col in ["Semana", "Plantel", "DOCENTE", "MODULO", "COMPETENTES", "NO COMPETENTES", "TOTAL ALUMNOS"]):
    st.warning("No se encontraron algunas columnas clave. Revisa el archivo CSV.")
    st.stop()

# Menú Principal
opcion = st.sidebar.selectbox("📌 Menú Principal", ["Competentes", "No Competentes", "Comportamiento Semanal de Docentes"])

### 📊 OPCIÓN 1: COMPETENTES
if opcion == "Competentes":
    st.title("📈 Dashboard de Docentes Competentes")

    # Filtros dinámicos
    semana_seleccionada = st.selectbox("📅 Selecciona una semana", sorted(df["Semana"].unique()))
    df_semanal = df.filter(df["Semana"] == semana_seleccionada)

    plantel_seleccionado = st.selectbox("🏫 Selecciona un plantel", sorted(df_semanal["Plantel"].unique()))
    df_filtrado = df_semanal.filter(df_semanal["Plantel"] == plantel_seleccionado)

    # 📊 Ranking de Docentes Competentes - TOP 15
    ranking_docentes = df_filtrado.group_by("DOCENTE").agg(pl.sum("COMPETENTES")).sort("COMPETENTES", descending=True).head(15)
    ranking_docentes = ranking_docentes.sort("COMPETENTES", descending=False)  

    st.subheader("📊 Ranking de Docentes Competentes - TOP 15")
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.barh(ranking_docentes["DOCENTE"], ranking_docentes["COMPETENTES"], color="green")

    for bar, estudiantes in zip(bars, ranking_docentes["COMPETENTES"]):
        ax.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f"{estudiantes}", ha='left', va='center', fontsize=10, color="black")

    ax.set_xlabel("Total de Estudiantes Competentes")
    ax.set_ylabel("Docentes")
    ax.set_title(f"Ranking de Docentes en {plantel_seleccionado} - Semana {semana_seleccionada}")
    st.pyplot(fig)

### 📊 OPCIÓN 2: NO COMPETENTES
elif opcion == "No Competentes":
    st.title("📉 Dashboard de Docentes No Competentes")

    semana_seleccionada = st.selectbox("📅 Selecciona una semana", sorted(df["Semana"].unique()))
    plantel_seleccionado = st.selectbox("🏫 Selecciona un plantel", sorted(df["Plantel"].unique()))
    df_filtrado = df.filter((df["Semana"] == semana_seleccionada) & (df["Plantel"] == plantel_seleccionado))

    # 📊 Ranking de Docentes NO Competentes - TOP 15
    ranking_docentes_no = df_filtrado.group_by("DOCENTE").agg(pl.sum("NO COMPETENTES")).sort("NO COMPETENTES", descending=True).head(15)
    ranking_docentes_no = ranking_docentes_no.sort("NO COMPETENTES", descending=False)  

    st.subheader("📊 Ranking de Docentes NO Competentes - TOP 15")
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.barh(ranking_docentes_no["DOCENTE"], ranking_docentes_no["NO COMPETENTES"], color="red")

    for bar, estudiantes in zip(bars, ranking_docentes_no["NO COMPETENTES"]):
        ax.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f"{estudiantes}", ha='left', va='center', fontsize=10, color="black")

    ax.set_xlabel("Total de Estudiantes NO Competentes")
    ax.set_ylabel("Docentes")
    ax.set_title(f"Docentes con mayor número de estudiantes NO competentes - Semana {semana_seleccionada}")
    st.pyplot(fig)

### 📊 OPCIÓN 3: COMPORTAMIENTO SEMANAL DE DOCENTES
elif opcion == "Comportamiento Semanal de Docentes":
    st.title("📊 Evolución Semanal de Docentes")

    # Selección de Plantel y Docente
    plantel_seleccionado = st.selectbox("🏫 Selecciona un plantel", sorted(df["Plantel"].unique()))
    docentes_disponibles = df.filter(df["Plantel"] == plantel_seleccionado)["DOCENTE"].unique()
    docente_seleccionado = st.selectbox("👨‍🏫 Selecciona un docente", sorted(docentes_disponibles))

    # Filtrar datos y calcular el total de estudiantes NO competentes por semana
    df_filtrado = df.filter((df["Plantel"] == plantel_seleccionado) & (df["DOCENTE"] == docente_seleccionado))
    df_agrupado = df_filtrado.group_by("Semana").agg(pl.sum("NO COMPETENTES"))

    # 📊 **Gráfico de barras**
    st.subheader(f"📊 Evolución de Estudiantes NO Competentes para {docente_seleccionado}")

    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.bar(df_agrupado["Semana"], df_agrupado["NO COMPETENTES"], color="red", edgecolor="black", alpha=0.7)

    # Etiquetas en las barras con solo el número total de estudiantes NO competentes
    for i, bar in enumerate(bars):
        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() - 5, f"{df_agrupado['NO COMPETENTES'][i]}",
                ha="center", fontsize=10, color="white", fontweight="bold")

    ax.set_xlabel("Semana")
    ax.set_ylabel("Total Estudiantes NO Competentes")
    ax.set_title(f"Evolución Semanal - {docente_seleccionado}")
    st.pyplot(fig)

st.success("✅ Dashboard completo y actualizado con mejoras de legibilidad y datos refinados.")
